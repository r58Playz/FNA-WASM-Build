diff --git a/src/mono/browser/runtime/driver.c b/src/mono/browser/runtime/driver.c
index 2a1d5b1db..088a0c638 100644
--- a/src/mono/browser/runtime/driver.c
+++ b/src/mono/browser/runtime/driver.c
@@ -432,6 +432,7 @@ mono_wasm_profiler_init_browser (const char *desc)
 
 #ifdef ENABLE_LOG_PROFILER
 
+/*
 void mono_profiler_init_log (const char *desc);
 
 EMSCRIPTEN_KEEPALIVE void
@@ -439,6 +440,7 @@ mono_wasm_profiler_init_log (const char *desc)
 {
 	mono_profiler_init_log (desc);
 }
+*/
 
 #endif
 
@@ -570,4 +572,4 @@ mono_wasm_read_as_bool_or_null_unsafe (PVOLATILE(MonoObject) obj) {
 	end:
 	MONO_EXIT_GC_UNSAFE;
 	return result;
-}
\ No newline at end of file
+}
diff --git a/src/mono/browser/runtime/startup.ts b/src/mono/browser/runtime/startup.ts
index b27364136..af193fcbc 100644
--- a/src/mono/browser/runtime/startup.ts
+++ b/src/mono/browser/runtime/startup.ts
@@ -369,7 +369,7 @@ async function postRunAsync (userpostRun: (() => void)[]) {
 
         // create /usr/share folder which is SpecialFolder.CommonApplicationData
         Module["FS_createPath"]("/", "usr", true, true);
-        Module["FS_createPath"]("/", "usr/share", true, true);
+        Module["FS_createPath"]("/usr", "share", true, true);
 
         // all user Module.postRun callbacks
         userpostRun.map(fn => fn());
diff --git a/src/mono/mono/metadata/class-setup-vtable.c b/src/mono/mono/metadata/class-setup-vtable.c
index b2f13d72d..c5cc67398 100644
--- a/src/mono/mono/metadata/class-setup-vtable.c
+++ b/src/mono/mono/metadata/class-setup-vtable.c
@@ -773,6 +773,7 @@ mono_method_get_method_definition (MonoMethod *method)
 static gboolean
 verify_class_overrides (MonoClass *klass, MonoMethod **overrides, int onum)
 {
+	return TRUE;
 #ifndef ENABLE_CHECKED_BUILD
 	if (klass->image == mono_defaults.corlib)
 		return TRUE;
diff --git a/src/mono/mono/metadata/class.c b/src/mono/mono/metadata/class.c
index c74c5c12e..7d3ed6495 100644
--- a/src/mono/mono/metadata/class.c
+++ b/src/mono/mono/metadata/class.c
@@ -2576,7 +2576,7 @@ mono_class_get_field_from_name_full (MonoClass *klass, const char *name, MonoTyp
 			if (strcmp (name, mono_field_get_name (field)) != 0)
 				continue;
 
-			if (type) {
+			if (false) {
 				MonoClassField *gfield = mono_metadata_get_corresponding_field_from_generic_type_definition (field);
 				g_assert (gfield != NULL);
 				MonoType *field_type = gfield->type;
@@ -6480,6 +6480,7 @@ can_access_member (MonoClass *access_klass, MonoClass *member_klass, MonoClass*
 gboolean
 mono_method_can_access_field (MonoMethod *method, MonoClassField *field)
 {
+	return TRUE;
 	/* FIXME: check all overlapping fields */
 	int can = can_access_member (method->klass, m_field_get_parent (field), NULL, mono_field_get_type_internal (field)->attrs & FIELD_ATTRIBUTE_FIELD_ACCESS_MASK);
 	if (!can) {
@@ -6515,6 +6516,7 @@ mono_method_get_method_definition (MonoMethod *method)
 gboolean
 mono_method_can_access_method (MonoMethod *method, MonoMethod *called)
 {
+	return TRUE;
 	method = mono_method_get_method_definition (method);
 	called = mono_method_get_method_definition (called);
 	return mono_method_can_access_method_full (method, called, NULL);
@@ -6534,6 +6536,7 @@ mono_method_can_access_method (MonoMethod *method, MonoMethod *called)
 gboolean
 mono_method_can_access_method_full (MonoMethod *method, MonoMethod *called, MonoClass *context_klass)
 {
+	return TRUE;
 	/* Wrappers are except from access checks */
 	if (method->wrapper_type != MONO_WRAPPER_NONE || called->wrapper_type != MONO_WRAPPER_NONE)
 		return TRUE;
diff --git a/src/mono/mono/metadata/icall.c b/src/mono/mono/metadata/icall.c
index e326e7a7b..f0fb2a54e 100644
--- a/src/mono/mono/metadata/icall.c
+++ b/src/mono/mono/metadata/icall.c
@@ -5566,15 +5566,81 @@ ves_icall_System_Reflection_RuntimeModule_InternalGetTypes (MonoImage *image, Mo
 		MonoArrayHandle res = mono_module_get_types (image, exceptions, FALSE, error);
 		return_val_if_nok (error, MONO_HANDLE_CAST(MonoArray, NULL_HANDLE));
 
-		int n = GUINTPTR_TO_INT (mono_array_handle_length (exceptions));
-		MonoExceptionHandle ex = MONO_HANDLE_NEW (MonoException, NULL);
-		for (int i = 0; i < n; ++i) {
-			MONO_HANDLE_ARRAY_GETREF(ex, exceptions, i);
-			if (!MONO_HANDLE_IS_NULL (ex)) {
-				mono_error_set_exception_handle (error, ex);
+		int i;
+		MonoTableInfo *table = &image->tables [MONO_TABLE_FILE];
+
+		/* Append data from all modules in the assembly */
+		int rows = table_info_get_rows (table);
+		for (i = 0; i < rows; ++i) {
+			if (!(mono_metadata_decode_row_col (table, i, MONO_FILE_FLAGS) & FILE_CONTAINS_NO_METADATA)) {
+				MonoImage *loaded_image = mono_assembly_load_module_checked (image->assembly, i + 1, error);
+				return_val_if_nok (error, MONO_HANDLE_CAST(MonoArray, NULL_HANDLE));
+
+				if (loaded_image) {
+					append_module_types (res, exceptions, loaded_image, FALSE, error);
+					return_val_if_nok (error, MONO_HANDLE_CAST(MonoArray, NULL_HANDLE));
+				}
+			}
+		}
+
+		/* the ReflectionTypeLoadException must have all the types (Types property),
+		 * NULL replacing types which throws an exception. The LoaderException must
+		 * contain all exceptions for NULL items.
+		 */
+
+		int len = GUINTPTR_TO_INT (mono_array_handle_length (res));
+
+		int ex_count = 0;
+		GList *list = NULL;
+		MonoReflectionTypeHandle t = MONO_HANDLE_NEW (MonoReflectionType, NULL);
+		for (i = 0; i < len; i++) {
+			MONO_HANDLE_ARRAY_GETREF (t, res, i);
+
+			if (!MONO_HANDLE_IS_NULL (t)) {
+				MonoClass *klass = mono_type_get_class_internal (MONO_HANDLE_GETVAL (t, type));
+				if ((klass != NULL) && mono_class_has_failure (klass)) {
+					/* keep the class in the list */
+					list = g_list_append (list, klass);
+					/* and replace Type with NULL */
+					MONO_HANDLE_ARRAY_SETREF (res, i, NULL_HANDLE);
+				}
+			} else {
+				ex_count ++;
+			}
+		}
+
+		if (list || ex_count) {
+			GList *tmp = NULL;
+			int length = g_list_length (list) + ex_count;
+
+			MonoArrayHandle exl = mono_array_new_handle (mono_defaults.exception_class, length, error);
+			if (!is_ok (error)) {
+				g_list_free (list);
 				return MONO_HANDLE_CAST(MonoArray, NULL_HANDLE);
 			}
+			/* Types for which mono_class_get_checked () succeeded */
+			MonoExceptionHandle exc = MONO_HANDLE_NEW (MonoException, NULL);
+			for (i = 0, tmp = list; tmp; i++, tmp = tmp->next) {
+				set_class_failure_in_array (exl, i, (MonoClass*)tmp->data);
+			}
+			/* Types for which it don't */
+			for (uintptr_t j = 0; j < mono_array_handle_length (exceptions); ++j) {
+				MONO_HANDLE_ARRAY_GETREF (exc, exceptions, j);
+				if (!MONO_HANDLE_IS_NULL (exc)) {
+					g_assert (i < length);
+					MONO_HANDLE_ARRAY_SETREF (exl, i, exc);
+					i ++;
+				}
+			}
+			g_list_free (list);
+			list = NULL;
+
+			MONO_HANDLE_ASSIGN (exc, mono_get_exception_reflection_type_load_checked (res, exl, error));
+			return_val_if_nok (error, MONO_HANDLE_CAST(MonoArray, NULL_HANDLE));
+			mono_error_set_exception_handle (error, exc);
+			return MONO_HANDLE_CAST(MonoArray, NULL_HANDLE);
 		}
+
 		return res;
 	}
 }
diff --git a/src/mono/mono/mini/interp/transform.c b/src/mono/mono/mini/interp/transform.c
index a74e9baaf..4b86d84f7 100644
--- a/src/mono/mono/mini/interp/transform.c
+++ b/src/mono/mono/mini/interp/transform.c
@@ -3489,7 +3489,9 @@ interp_transform_call (TransformData *td, MonoMethod *method, MonoMethod *target
 	if (target_method == NULL) {
 		if (calli) {
 			CHECK_STACK_RET(td, 1, FALSE);
-			if (method->wrapper_type != MONO_WRAPPER_NONE)
+			if (token == 0xF0F0F0F0)
+				csignature = method->signature;
+			else if (method->wrapper_type != MONO_WRAPPER_NONE)
 				csignature = (MonoMethodSignature *)mono_method_get_wrapper_data (method, token);
 			else {
 				csignature = mono_metadata_parse_signature_checked (image, token, error);
@@ -9759,11 +9761,6 @@ mono_interp_transform_method (InterpMethod *imethod, ThreadContext *context, Mon
 	method_class_vt = mono_class_vtable_checked (imethod->method->klass, error);
 	return_if_nok (error);
 
-	if (!method_class_vt->initialized) {
-		mono_runtime_class_init_full (method_class_vt, error);
-		return_if_nok (error);
-	}
-
 	MONO_PROFILER_RAISE (jit_begin, (method));
 
 	if (mono_method_signature_internal (method)->is_inflated)
