name: WASM Build (FNA)

on: 
  push:
    branches: 
      - main 
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
      
jobs:
  windows:
    strategy:
      matrix:
        os: [ubuntu-latest]
        variant: [Release]
    runs-on: ${{ matrix.os }}
    name: WASM ${{ matrix.variant }} on ${{ matrix.os }}
    steps:
      - name: generate random name
        run: echo RELEASE_NAME=$(uuidgen) >> $GITHUB_ENV
      - name: Check out source
        uses: actions/checkout@v1
      - uses: mymindstorm/setup-emsdk@v14
        with:
          version: 3.1.56
      - name: Install dependencies
        run: |
          sudo apt -y update
          sudo apt install -y ninja-build cmake llvm lld clang build-essential python-is-python3 curl git lldb libicu-dev liblttng-ust-dev libssl-dev libkrb5-dev ninja-build pigz cpio spirv-headers
      - name: Verify
        run: emcc -v    
      - name: LibA
        shell: bash
        run: |
          cd liba/
          git clone -b v9.0.1 --depth=1 https://github.com/dotnet/runtime
          emcc liba.c -r -o liba.o \
            -DHOST_BROWSER -DHOST_WASM -DTARGET_WASM \
            -Iruntime/src/mono/ -Iruntime/src/native/public/ -Iruntime/src/mono/mono/eglib/ -Iruntime/src/native/ -I.
      - name: dotnet
        shell: bash
        run: |
          cd liba/runtime/
          git apply ../../dotnet.patch
          ./build.sh -os browser -s mono+libs /p:WasmEnableThreads=true -c Release
          7z a ../runtime.zip './artifacts/bin/microsoft.netcore.app.runtime.browser-wasm/Release/*'
      - name: SDL3
        shell: bash
        run: |
          git clone -b release-3.2.2 https://github.com/libsdl-org/SDL
          cd SDL
          mkdir emscripten-build
          cd emscripten-build
          CFLAGS="-pthread" emcmake cmake -S .. \
            -DSDL_WERROR=ON \
            -DSDL_TESTS=OFF \
            -DSDL_INSTALL_TESTS=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=prefix \
            -GNinja
          ninja --verbose
      - name: FNA3D
        shell: bash
        run: |
          git clone --recursive https://github.com/FNA-XNA/FNA3D -b 25.02
          cd FNA3D
          git apply /home/runner/work/FNA-WASM-Build/FNA-WASM-Build/FNA3D.patch
          mkdir build
          cd build
          emcmake cmake .. -DBUILD_SDL3=ON -DSDL3_INCLUDE_DIRS=/home/runner/work/FNA-WASM-Build/FNA-WASM-Build/SDL/include -DSDL3_LIBRARIES=/home/runner/work/FNA-WASM-Build/FNA-WASM-Build/SDL/emscripten-build/libSDL3.a
          emmake make
      - name: FAudio
        shell: bash
        run: |           
          git clone https://github.com/FNA-XNA/FAudio -b 25.02
          cd FAudio
          mkdir build
          cd build
          emcmake cmake .. -DBUILD_SDL3=ON -DSDL3_INCLUDE_DIRS=/home/runner/work/FNA-WASM-Build/FNA-WASM-Build/SDL/include -DSDL3_LIBRARIES=/home/runner/work/FNA-WASM-Build/FNA-WASM-Build/SDL/emscripten-build/libSDL3.a
          emmake make
      - name: Copy Binaries (with new names)
        shell: bash
        run: |
          mkdir Binaries
          cp ./liba/liba.o Binaries/liba.o
          cp ./liba/runtime.zip Binaries/dotnet.zip
          cp ./SDL/emscripten-build/libSDL3.a Binaries/SDL3.a
          cp ./FNA3D/build/libFNA3D.a Binaries/FNA3D.a
          cp ./FNA3D/build/libmojoshader.a Binaries/libmojoshader.a    
          cp ./FAudio/build/libFAudio.a Binaries/FAudio.a
      - name: Wrap FNA3D
        shell: bash
        run: |
          emcc -r wrap_fna.c -o wrap_fna.o
          mkdir FNA3DWrap
          cd FNA3DWrap
          ar x ../Binaries/FNA3D.a
          mv ../wrap_fna.o .
          emar rc ../Binaries/FNA3D_Wrapped.a *.o
      - name: Compress Binaries
        run: 7z a FNA-WASM.Binaries.zip Binaries/*
      - name: Archive ${{ matrix.variant }} WASM archive on ${{ matrix.os }}
        uses: actions/upload-artifact@master
        with:
          name: WASM Libraries for ${{ matrix.variant }} on ${{ matrix.os }}
          path: FNA-WASM.Binaries.zip
      - name: Make a release
        uses: ncipollo/release-action@v1
        with:
          name: 'FNALibs WASM ${{ env.RELEASE_NAME }}'
          body: 'These are the FNA libs build for WASM (Emscripten)'
          commit: ${{ github.ref_name }}
          tag: ${{ env.RELEASE_NAME }}
          removeArtifacts: true
          artifacts: "Binaries/*"
          token: ${{ secrets.GITHUB_TOKEN }}
